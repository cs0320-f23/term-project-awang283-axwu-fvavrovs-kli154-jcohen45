<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>edu.brown.cs32</groupId>
  <artifactId>s0</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>

    <!-- Using the latest LTS version (17) -->
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- Defines UTF-8 encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- SortPom -->
    <sortpom.version>3.0.0</sortpom.version>

    <!-- Spotless -->
    <spotless.version>2.22.8</spotless.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <version>3.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-mongodb</artifactId>
      <version>3.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
      <version>3.1.2</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
      <version>2.10.2</version>
    </dependency>

    <!-- SLF4J API -->
    <!--    <dependency>-->
    <!--      <groupId>org.slf4j</groupId>-->
    <!--      <artifactId>slf4j-api</artifactId>-->
    <!--      <version>1.7.32</version>-->
    <!--    </dependency>-->

    <!-- SLF4J binding: Logback -->
    <!--    <dependency>-->
    <!--      <groupId>ch.qos.logback</groupId>-->
    <!--      <artifactId>logback-classic</artifactId>-->
    <!--&lt;!&ndash;      <version>1.2.3</version>&ndash;&gt;-->
    <!--      &lt;!&ndash; use the version compatible with your SLF4J version &ndash;&gt;-->
    <!--    </dependency>-->

    <!--
           We use Moshi for serialization/deserialization of JSON data.
           Moshi 1.13.0 was released in December 2021.
           We'll also use Moshi's adapters package, which includes pre-built adapters
           for quite a few things, including polymorphic adapters.
           The adapters README.md includes a "latest.version" version; replaced with the
           latest version as of August 2022.
       -->
    <dependency>
      <groupId>com.squareup.moshi</groupId>
      <artifactId>moshi</artifactId>
      <version>1.15.0</version>
    </dependency>
    <dependency>
      <groupId>com.squareup.moshi</groupId>
      <artifactId>moshi-adapters</artifactId>
      <version>1.14.0</version>
    </dependency>

    <!--
           Spark is a lightweight framework for creating web applications.
           Spark is most commonly used to create APIs and websites.
    -->
    <dependency>
      <groupId>com.sparkjava</groupId>
      <artifactId>spark-core</artifactId>
      <version>2.9.4</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!--
           TestNG builds useful functionality on top of JUnit, such as method annotations.
    -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>7.8.0</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>32.1.2-jre</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.10.0</version>
      <scope>compile</scope>
    </dependency>

    <!--
           JUnit is a unit testing library for Java.
    -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>5.4.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.6</version>
      <scope>test</scope>
    </dependency>

  </dependencies>
  <build>
    <plugins>
      <!--
            The Compiler Plugin is used to compile the sources of your project.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
          <compilerArgs>
            <arg>-parameters</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <!--
            We use Spotless to automate style checking and code formatting.
      -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.version}</version>
        <configuration>
          <java>
            <!-- style checking + formatting will apply to these files -->
            <includes>
              <include>src/main/java/**/*.java</include>
              <include>src/test/java/**/*.java</include>
            </includes>

            <!-- standard import order -->
            <importOrder/>
            <!-- self-explanatory -->
            <removeUnusedImports/>
            <!-- use google-java-format: https://github.com/google/google-java-format -->
            <googleJavaFormat/>
          </java>
        </configuration>
        <executions>
          <!-- checks formatting during compilation; will fix if errors exist -->
          <execution>
            <goals>
              <goal>apply</goal>
            </goals>
            <phase>compile</phase>
          </execution>
        </executions>
      </plugin>

      <!--
            We use SortPom to apply ordering and formatting to this pom.xml file.
      -->
      <plugin>
        <groupId>com.github.ekryd.sortpom</groupId>
        <artifactId>sortpom-maven-plugin</artifactId>
        <version>${sortpom.version}</version>
        <configuration>
          <predefinedSortOrder>custom_1</predefinedSortOrder>
          <lineSeparator>\n</lineSeparator>
          <encoding>${project.build.sourceEncoding}</encoding>
          <sortProperties>true</sortProperties>
          <sortDependencies>scope</sortDependencies>
          <expandEmptyElements>false</expandEmptyElements>
        </configuration>
        <executions>
          <!-- sorts the pom.xml file during the compile phase -->
          <execution>
            <goals>
              <goal>sort</goal>
            </goals>
            <phase>compile</phase>
          </execution>
        </executions>
      </plugin>

      <!--
           We use SpotBugs to detect bugs automatically.
      -->
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.6.0.0</version>
        <dependencies>
          <!-- overwrite dependency on spotbugs if you want to specify the version of spotbugs -->
          <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs</artifactId>
            <version>4.7.0</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- The Site Plugin is used to generate an HTML representation of
      the project's metadata. The generated HTML also includes the project's
      reports that were configured in the POM. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.7.1</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.7</version>
      </plugin>

      <!-- JaCoCo is used to generate reports about test coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.8</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>prepare-package</phase>
          </execution>
        </executions>
      </plugin>

      <!-- The Surefire Plugin is used during the test phase of
      the build lifecycle to execute the unit tests of an application.
      It generates reports in TXT and XML formats. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M7</version>
      </plugin>

      <!-- The maven enforcer plugin enforces that the maven version is 3.6.0 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6.0</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <mainClass>edu.brown.cs.student.main.Main</mainClass>
          <arguments/>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!-- Reporting Section -->
  <reporting>
    <plugins>

      <!--
          Plugin used to report on project dependencies.
          https://maven.apache.org/plugins/maven-project-info-reports-plugin/.
      -->
      <plugin>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <!-- Until it uses BCEL 6.0, details breaks on Java 11 -->
          <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
          <!-- jetty related locations can't be found, just skip. -->
          <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
        </configuration>
      </plugin>

      <!--
          Maven JXR plugin used with PMD plugin for referencing code errors.
          https://maven.apache.org/jxr/maven-jxr-plugin/.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>3.0.0</version>
      </plugin>

      <!--
          Javadoc plugin for generating javadoc site.
          https://maven.apache.org/plugins/maven-javadoc-plugin/.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
        </configuration>
        <reportSets>
          <reportSet>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!--
          PMD looks for bad coding practices such as unused variables.
          https://maven.apache.org/plugins/maven-pmd-plugin/.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>3.17.0</version>
      </plugin>

      <!--
          JaCoCo creates a "coverage" report, so you can see what
          lines of codes and branches your tests exercise.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>3.0.0-M4</version>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <!-- select non-aggregate reports -->
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>
</project>
